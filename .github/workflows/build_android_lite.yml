name: Build Android APK (Lite)
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: kivy/buildozer:latest

    steps:
      - uses: actions/checkout@v4

      - name: Generate minimal project inline (no heavy deps)
        run: |
          python3 - <<'PY'
          from pathlib import Path
          def w(p, s):
              p = Path(p); p.parent.mkdir(parents=True, exist_ok=True); p.write_text(s, encoding="utf-8")

          # ---- core ----
          w("core/__init__.py", "")
          w("core/ports.py", """from typing import List, Tuple, Protocol, Optional
class IOCR(Protocol):
    def parse_entries(self, image_path: str) -> List[Tuple[str, int]]: ...
class IRepository(Protocol):
    def init(self) -> None: ...
    def add_page(self, path: str, ts: str) -> int: ...
    def add_entry(self, name: str, amount_st: int, ts: str, page_id: int | None) -> None: ...
    def search_by_name(self, q: str) -> List[Tuple[str,int]]: ...
""")

          w("core/services.py", """from __future__ import annotations
from dataclasses import dataclass
from typing import List
from core.ports import IOCR, IRepository

@dataclass
class SavePageService:
    repo: IRepository
    ocr: IOCR

    def save_drawn_page(self, image_path: str, ts_iso: str) -> tuple[int, int]:
        page_id = self.repo.add_page(image_path, ts_iso)
        # Lite: –Ω—è–º–∞ OCR ‚Üí –Ω–µ –∑–∞–ø–∏—Å–≤–∞–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–µ–¥–æ–≤–µ
        # (–ø–æ-–∫—ä—Å–Ω–æ —â–µ –≤–∫–ª—é—á–∏–º –ø—ä–ª–Ω–∏—è OCR/AI –±–∏–ª–¥)
        return page_id, 0
""")

          # ---- infra ----
          w("infra/__init__.py", "")
          w("infra/database_sqlite.py", """import sqlite3
from typing import List, Tuple
from core.ports import IRepository

class SQLiteRepo(IRepository):
    def __init__(self, db_path: str = "infra/veresia.db"):
        self.db_path = db_path
    def _conn(self): return sqlite3.connect(self.db_path)
    def init(self) -> None:
        with self._conn() as con:
            cur=con.cursor()
            cur.execute("CREATE TABLE IF NOT EXISTS pages(id INTEGER PRIMARY KEY AUTOINCREMENT, path TEXT, ts TEXT)")
            cur.execute("CREATE TABLE IF NOT EXISTS entries(id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, amount_st INTEGER, ts TEXT, page_id INTEGER)")
            con.commit()
    def add_page(self, path: str, ts: str) -> int:
        with self._conn() as con:
            cur=con.cursor(); cur.execute("INSERT INTO pages(path,ts) VALUES(?,?)",(path,ts)); con.commit(); return cur.lastrowid
    def add_entry(self, name: str, amount_st: int, ts: str, page_id: int | None) -> None:
        with self._conn() as con:
            cur=con.cursor(); cur.execute("INSERT INTO entries(name,amount_st,ts,page_id) VALUES(?,?,?,?)",(name,amount_st,ts,page_id)); con.commit()
    def search_by_name(self, q: str) -> List[Tuple[str,int]]:
        with self._conn() as con:
            cur=con.cursor()
            if q.strip():
                cur.execute("SELECT name, SUM(amount_st) FROM entries WHERE name LIKE ? GROUP BY name ORDER BY 2 DESC",(f"%{q}%",))
            else:
                cur.execute("SELECT name, SUM(amount_st) FROM entries GROUP BY name ORDER BY 2 DESC")
            return [(r[0], int(r[1] or 0)) for r in cur.fetchall()]
""")

          # OCR stub (–≤—Ä—ä—â–∞ –ø—Ä–∞–∑–Ω–æ ‚Äì –Ω—è–º–∞ —Ç–µ–∂–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
          w("infra/ocr_stub.py", """from typing import List, Tuple
class NoOCR:
    def parse_entries(self, image_path: str) -> List[Tuple[str,int]]:
        return []
""")

          # ---- ui ----
          w("ui_kivy/__init__.py","")
          w("ui_kivy/app.py", """from datetime import datetime
import os, time
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.scrollview import ScrollView
from kivy.uix.screenmanager import Screen, ScreenManager, FadeTransition
from kivy.graphics import Color, Rectangle, Line
from kivy.metrics import dp
from core.services import SavePageService

class DrawArea(BoxLayout):
    def __init__(self, **kw):
        super().__init__(**kw); self.orientation='vertical'; self.padding=dp(8); self.spacing=dp(8)
        self.canvas_box=BoxLayout(size_hint=(1,1)); self.add_widget(self.canvas_box)
        with self.canvas_box.canvas: Color(1,1,1,1); self.bg=Rectangle(size=self.canvas_box.size,pos=self.canvas_box.pos)
        self.canvas_box.bind(size=self._u,pos=self._u); self.lines=[]
        self.canvas_box.bind(on_touch_down=self._d, on_touch_move=self._m)
    def _u(self,*_): self.bg.size=self.canvas_box.size; self.bg.pos=self.canvas_box.pos
    def _d(self,w,t):
        if not self.canvas_box.collide_point(*t.pos): return
        with self.canvas_box.canvas: Color(0,0,0,1); self.lines.append(Line(points=[*t.pos], width=2))
    def _m(self,w,t):
        if not self.canvas_box.collide_point(*t.pos): return
        if self.lines: self.lines[-1].points += [*t.pos]
    def export_to_png(self, path): self.canvas_box.export_as_image().save(path)

class SearchView(Screen):
    def __init__(self, repo, **kw):
        super().__init__(**kw); self.repo=repo
        root=BoxLayout(orientation='vertical')
        top=GridLayout(cols=3, size_hint=(1,None), height=dp(64), padding=[dp(12),0,dp(12),0], spacing=dp(8))
        with top.canvas.before: Color(0,0,0,1); self._r=Rectangle(size=top.size,pos=top.pos)
        top.bind(size=lambda *_:self._u(top), pos=lambda *_:self._u(top))
        btn_back=Button(text='‚Üê –ü–ª–∞—Ç–Ω–æ', size_hint=(None,1), width=dp(140)); btn_back.bind(on_press=lambda *_: setattr(self.manager,'current','draw'))
        top.add_widget(btn_back); top.add_widget(Label(text='–¢—ä—Ä—Å–µ–Ω–µ', color=(1,1,1,1), font_size=dp(22))); top.add_widget(Label()); root.add_widget(top)
        bar=BoxLayout(orientation='horizontal', size_hint=(1,None), height=dp(56), padding=[dp(12),dp(8)], spacing=dp(8))
        from kivy.uix.textinput import TextInput
        self.search=TextInput(hint_text='üîç –ò–º–µ‚Ä¶', multiline=False, font_size=dp(18))
        btn=Button(text='–¢—ä—Ä—Å–∏'); btn.bind(on_press=self.on_search)
        bar.add_widget(self.search); bar.add_widget(btn); root.add_widget(bar)
        self.results=Label(text='', halign='left', valign='top', markup=True); self.results.bind(size=lambda *_: setattr(self.results,'text_size', self.results.size))
        sv=ScrollView(); sv.add_widget(self.results); root.add_widget(sv); self.add_widget(root)
    def _u(self,w): self._r.size=w.size; self._r.pos=w.pos
    def on_search(self,*_):
        rows=self.repo.search_by_name(self.search.text or '')
        self.results.text='–ù–∏—â–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ.' if not rows else '\\n'.join([f'‚Ä¢ [b]{n}[/b] ‚Äî {t/100:.2f} –ª–≤' for n,t in rows])

class DrawView(Screen):
    def __init__(self, service: SavePageService, **kw):
        super().__init__(**kw); self.service=service
        root=BoxLayout(orientation='vertical')
        top=GridLayout(cols=3, size_hint=(1,None), height=dp(64), padding=[dp(12),0,dp(12),0], spacing=dp(8))
        with top.canvas.before: Color(0,0.4,1,1); self._r=Rectangle(size=top.size,pos=top.pos)
        top.bind(size=lambda *_:self._u(top), pos=lambda *_:self._u(top))
        btn_save=Button(text='–ó–∞–ø–∞–∑–∏'); btn_save.bind(on_press=self.on_save); top.add_widget(btn_save)
        top.add_widget(Label(text='–ü–ª–∞—Ç–Ω–æ', color=(1,1,1,1), font_size=dp(22)))
        btn_search=Button(text='–¢—ä—Ä—Å–µ–Ω–µ'); btn_search.bind(on_press=lambda *_: setattr(self.manager,'current','search')); top.add_widget(btn_search)
        root.add_widget(top)
        self.draw=DrawArea(); root.add_widget(self.draw)
        self.status=Label(text='–ì–æ—Ç–æ–≤–æ', size_hint=(1,None), height=dp(28))
        root.add_widget(self.status); self.add_widget(root)
    def _u(self,w): self._r.size=w.size; self._r.pos=w.pos
    def on_save(self,*_):
        os.makedirs('pages', exist_ok=True)
        ts=time.strftime('%Y%m%d_%H%M%S'); path=f'pages/page_{ts}.png'
        try: self.draw.export_to_png(path)
        except Exception as e: self.status.text=f'–ì—Ä–µ—à–∫–∞: {e}'; return
        from core.services import SavePageService
        from datetime import datetime
        pid,n=self.service.save_drawn_page(path, datetime.now().isoformat(timespec='seconds'))
        self.draw.canvas_box.canvas.clear(); 
        with self.draw.canvas_box.canvas: Color(1,1,1,1); self.draw.bg=Rectangle(size=self.draw.canvas_box.size,pos=self.draw.canvas_box.pos)
        self.status.text=f'–ó–∞–ø–∞–∑–µ–Ω–æ. –†–µ–¥–æ–≤–µ: {n}. PNG: {path}'
class VeresiyaApp(App):
    def __init__(self, repo, service, **kw):
        super().__init__(**kw); self.repo=repo; self.service=service
    def build(self):
        from kivy.uix.screenmanager import ScreenManager, FadeTransition
        sm=ScreenManager(transition=FadeTransition()); self.repo.init()
        sm.add_widget(DrawView(self.service, name='draw')); sm.add_widget(SearchView(self.repo, name='search')); sm.current='draw'; return sm
""")

          # ---- entry ----
          w("main.py", """from infra.database_sqlite import SQLiteRepo
from infra.ocr_stub import NoOCR
from core.services import SavePageService
from ui_kivy.app import VeresiyaApp

repo = SQLiteRepo()
ocr = NoOCR()
service = SavePageService(repo=repo, ocr=ocr)

if __name__ == '__main__':
    VeresiyaApp(repo=repo, service=service).run()
""")

          # ---- buildozer.spec (–ª–µ–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏) ----
          w("buildozer.spec", """[app]
title = Veresia
package.name = veresia
package.domain = com.yourstore
source.dir = .
source.include_exts = py,kv,png,jpg,ttf,zip,txt,md,npz,db
version = 0.1
requirements = python3,kivy,pillow
orientation = sensor
fullscreen = 0
android.archs = arm64-v8a, armeabi-v7a
android.api = 33
android.minapi = 21
p4a.branch = master
android.permissions =
""")
          print("‚úÖ Lite project generated")
          PY

      - name: Build APK (debug)
        run: |
          buildozer android debug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: veresia-apk-lite
          path: bin/*.apk
